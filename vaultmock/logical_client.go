// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mwalto7/vault (interfaces: LogicalClient)

// Package vaultmock is a generated GoMock package.
package vaultmock

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/vault/api"
	reflect "reflect"
)

// LogicalClient is a mock of LogicalClient interface
type LogicalClient struct {
	ctrl     *gomock.Controller
	recorder *LogicalClientMockRecorder
}

// LogicalClientMockRecorder is the mock recorder for LogicalClient
type LogicalClientMockRecorder struct {
	mock *LogicalClient
}

// NewLogicalClient creates a new mock instance
func NewLogicalClient(ctrl *gomock.Controller) *LogicalClient {
	mock := &LogicalClient{ctrl: ctrl}
	mock.recorder = &LogicalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *LogicalClient) EXPECT() *LogicalClientMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *LogicalClient) Delete(arg0 string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *LogicalClientMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*LogicalClient)(nil).Delete), arg0)
}

// DeleteWithData mocks base method
func (m *LogicalClient) DeleteWithData(arg0 string, arg1 map[string][]string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWithData", arg0, arg1)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWithData indicates an expected call of DeleteWithData
func (mr *LogicalClientMockRecorder) DeleteWithData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithData", reflect.TypeOf((*LogicalClient)(nil).DeleteWithData), arg0, arg1)
}

// List mocks base method
func (m *LogicalClient) List(arg0 string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *LogicalClientMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*LogicalClient)(nil).List), arg0)
}

// Read mocks base method
func (m *LogicalClient) Read(arg0 string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *LogicalClientMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*LogicalClient)(nil).Read), arg0)
}

// ReadWithData mocks base method
func (m *LogicalClient) ReadWithData(arg0 string, arg1 map[string][]string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWithData", arg0, arg1)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWithData indicates an expected call of ReadWithData
func (mr *LogicalClientMockRecorder) ReadWithData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithData", reflect.TypeOf((*LogicalClient)(nil).ReadWithData), arg0, arg1)
}

// Unwrap mocks base method
func (m *LogicalClient) Unwrap(arg0 string) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwrap", arg0)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unwrap indicates an expected call of Unwrap
func (mr *LogicalClientMockRecorder) Unwrap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwrap", reflect.TypeOf((*LogicalClient)(nil).Unwrap), arg0)
}

// Write mocks base method
func (m *LogicalClient) Write(arg0 string, arg1 map[string]interface{}) (*api.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(*api.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *LogicalClientMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*LogicalClient)(nil).Write), arg0, arg1)
}
